Kadane’s Algorithm Explanation:

Kadane’s Algorithm is an efficient way to find the maximum sum of any contiguous subarray within a one-dimensional numeric array. It solves the problem in O(n) time, making it much faster than the brute-force approach with time complexity O(n^2).

Here’s how Kadane’s Algorithm works:

Key Idea:

	•	Traverse the array while keeping track of the maximum subarray sum seen so far.
	•	If at any point the current subarray sum (c) becomes negative, it is reset to 0 since any subarray that includes a negative sum won’t contribute to the maximum sum.

Algorithm Steps:

	1.	Initialize two variables:
	•	sum to store the maximum sum encountered so far (set to INT_MIN initially).
	•	c to store the current subarray sum (set to 0 initially).
	2.	Traverse the array from the first element to the last:
	•	Add the current element to c (current subarray sum).
	•	Update sum with the maximum value between c and sum. This ensures that sum always holds the largest subarray sum encountered so far.
	•	If c becomes negative, reset c to 0. This is because a negative sum would only decrease the potential sum of future subarrays.
	3.	The result (sum) will hold the maximum subarray sum after the loop finishes.

Code Walkthrough:

int kadane_max_sum(int arr[], int n){
    int sum = INT_MIN;  // Initialize sum to a very small value
    int c = 0;          // Initialize current subarray sum to 0
    
    for(int i=0; i<n; i++){ // Loop through each element of the array
        c += arr[i];        // Add the current element to the current subarray sum
        sum = max(c, sum);  // Update the maximum sum if current subarray sum is larger
        if(c < 0) c = 0;    // Reset the current sum if it becomes negative
    }
    
    return sum;  // Return the maximum subarray sum
}

Breakdown of Variables:

	•	sum: Keeps track of the maximum sum of the subarray encountered so far.
	•	c: Accumulates the sum of the current subarray.

Example Test Cases:

	1.	Test Case 1:
	•	Input:

5
-2 1 -3 4 -1


	•	Explanation:
	•	Traverse the array:
	•	c = -2, sum = max(-2, INT_MIN) = -2
	•	c = 1, sum = max(1, -2) = 1
	•	c = -2, sum = max(-2, 1) = 1
	•	c = 4, sum = max(4, 1) = 4
	•	c = 3, sum = max(3, 4) = 4
	•	Output:

4


	2.	Test Case 2:
	•	Input:

4
1 2 3 4


	•	Explanation:
	•	Traverse the array:
	•	c = 1, sum = max(1, INT_MIN) = 1
	•	c = 3, sum = max(3, 1) = 3
	•	c = 6, sum = max(6, 3) = 6
	•	c = 10, sum = max(10, 6) = 10
	•	Output:

10


	3.	Test Case 3:
	•	Input:

3
-1 -2 -3


	•	Explanation:
	•	Traverse the array:
	•	c = -1, sum = max(-1, INT_MIN) = -1
	•	c = -2, reset c = 0 because c < 0
	•	c = -3, reset c = 0 because c < 0
	•	Output:

-1


	4.	Test Case 4:
	•	Input:

6
-2 1 -3 4 -1 2


	•	Explanation:
	•	Traverse the array:
	•	c = -2, sum = max(-2, INT_MIN) = -2
	•	c = 1, sum = max(1, -2) = 1
	•	c = -2, reset c = 0 because c < 0
	•	c = 4, sum = max(4, 1) = 4
	•	c = 3, sum = max(3, 4) = 4
	•	c = 5, sum = max(5, 4) = 5
	•	Output:

5



Time Complexity:

	•	O(n): Kadane’s algorithm only requires a single traversal of the array, making it linear in time complexity.

Space Complexity:

	•	O(1): Kadane’s algorithm uses only a few extra variables, so its space complexity is constant.

Kadane’s Algorithm Use Cases:

Kadane’s Algorithm is useful in many real-world problems, including financial analysis (to find the maximum profit sub-period), gaming (to compute maximum scores in sub-ranges), and more.