In this Algorithm, we use the DIVIDE AND CONQUER method
here we divide the array into small individual chunk and last we merge them;
here we use the mid point to divide the array...

here we have recursion calls, to divide and after succesfull divide we conquer the solution\

here complex part is of merging them as we are copying the values of it to the array and meging them..

Chat-GPT:
MergeSort Algorithm: Detailed but Concise Overview

MergeSort is an efficient, comparison-based divide-and-conquer sorting algorithm that works by recursively splitting a list into two halves, sorting each half, and then merging the sorted halves back together.

	1.	How it works:
	•	Divide the list into two roughly equal halves.
	•	Recursively apply MergeSort to both halves until each sublist contains a single element (or is empty).
	•	Merge the two sorted sublists into a single sorted list by comparing their elements and arranging them in order.
	•	Continue merging the sublists until the entire list is sorted.
	2.	Time Complexity:
	•	Best, Average, and Worst Case: O(n log n), where n is the number of elements. This is due to the logarithmic depth of recursive splits and the linear work required to merge the sublists at each level.
	3.	Space Complexity:
	•	O(n), because it requires extra space to store the temporary subarrays during the merging process. MergeSort is not an in-place sorting algorithm as it needs additional memory for merging the divided arrays.
	4.	Characteristics:
	•	Stable: Maintains the relative order of equal elements, which makes it useful when preserving order matters.
	•	Efficient for large datasets, especially when stability is important or when external sorting (such as with large files that don’t fit in memory) is needed.
	•	Divide and conquer: MergeSort’s recursive nature is a hallmark of its efficiency, and it’s well-suited for parallel execution.

MergeSort is often favored for its predictable O(n log n) performance and stability, making it ideal for large datasets and scenarios requiring external sorting. However, its extra space requirement can be a drawback compared to in-place algorithms like QuickSort.